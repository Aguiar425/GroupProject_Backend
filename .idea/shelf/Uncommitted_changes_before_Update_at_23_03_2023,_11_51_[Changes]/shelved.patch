Index: src/main/java/org/mindswap/model/Token.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.mindswap.model;\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity\npublic class Token {\n\n    @Id\n    @GeneratedValue\n    public Integer id;\n\n    @Column(unique = true)\n    public String token;\n\n    @Enumerated(EnumType.STRING)\n    public TokenType tokenType = TokenType.BEARER;\n\n    public boolean revoked;\n\n    public boolean expired;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_email\")\n    public String email;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/mindswap/model/Token.java b/src/main/java/org/mindswap/model/Token.java
--- a/src/main/java/org/mindswap/model/Token.java	(revision b2445abc8ab1e6510a854f27b4bc43b9fe9667d2)
+++ b/src/main/java/org/mindswap/model/Token.java	(date 1679571608418)
@@ -24,10 +24,8 @@
     public TokenType tokenType = TokenType.BEARER;
 
     public boolean revoked;
-
     public boolean expired;
 
-    @ManyToOne
-    @JoinColumn(name = "user_email")
     public String email;
+
 }
\ No newline at end of file
Index: src/main/java/org/mindswap/security/config/JwtService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.mindswap.security.config;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\nimport io.jsonwebtoken.io.Decoders;\nimport io.jsonwebtoken.security.Keys;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.stereotype.Service;\nimport java.security.Key;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Function;\n\n@Service\npublic class JwtService {\n\n  private static final String SECRET_KEY = \"404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970\";\n\n  public String extractUsername(String token) {\n    return extractClaim(token, Claims::getSubject);\n  }\n\n  public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {\n    final Claims claims = extractAllClaims(token);\n    return claimsResolver.apply(claims);\n  }\n\n  public String generateToken(UserDetails userDetails) {\n    return generateToken(new HashMap<>(), userDetails);\n  }\n\n  public String generateToken(\n      Map<String, Object> extraClaims,\n      UserDetails userDetails\n  ) {\n    return Jwts\n        .builder()\n        .setClaims(extraClaims)\n        .setSubject(userDetails.getUsername())\n        .setIssuedAt(new Date(System.currentTimeMillis()))\n        .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 24))\n        .signWith(getSignInKey(), SignatureAlgorithm.HS256)\n        .compact();\n  }\n\n  public boolean isTokenValid(String token, UserDetails userDetails) {\n    final String username = extractUsername(token);\n    return (username.equals(userDetails.getUsername())) && !isTokenExpired(token);\n  }\n\n  private boolean isTokenExpired(String token) {\n    return extractExpiration(token).before(new Date());\n  }\n\n  private Date extractExpiration(String token) {\n    return extractClaim(token, Claims::getExpiration);\n  }\n\n  private Claims extractAllClaims(String token) {\n    return Jwts\n        .parserBuilder()\n        .setSigningKey(getSignInKey())\n        .build()\n        .parseClaimsJws(token)\n        .getBody();\n  }\n\n  private Key getSignInKey() {\n    byte[] keyBytes = Decoders.BASE64.decode(SECRET_KEY);\n    return Keys.hmacShaKeyFor(keyBytes);\n  }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/mindswap/security/config/JwtService.java b/src/main/java/org/mindswap/security/config/JwtService.java
--- a/src/main/java/org/mindswap/security/config/JwtService.java	(revision b2445abc8ab1e6510a854f27b4bc43b9fe9667d2)
+++ b/src/main/java/org/mindswap/security/config/JwtService.java	(date 1679569252941)
@@ -32,17 +32,19 @@
   }
 
   public String generateToken(
-      Map<String, Object> extraClaims,
-      UserDetails userDetails
+          Map<String, Object> extraClaims,
+          UserDetails userDetails
   ) {
+    System.out.println(userDetails.getAuthorities());
     return Jwts
-        .builder()
-        .setClaims(extraClaims)
-        .setSubject(userDetails.getUsername())
-        .setIssuedAt(new Date(System.currentTimeMillis()))
-        .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 24))
-        .signWith(getSignInKey(), SignatureAlgorithm.HS256)
-        .compact();
+            .builder()
+            .setClaims(extraClaims)
+            .claim("role", userDetails.getAuthorities())
+            .setSubject(userDetails.getUsername())
+            .setIssuedAt(new Date(System.currentTimeMillis()))
+            .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 24))
+            .signWith(getSignInKey(), SignatureAlgorithm.HS256)
+            .compact();
   }
 
   public boolean isTokenValid(String token, UserDetails userDetails) {
Index: src/main/java/org/mindswap/model/Rental.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.mindswap.model;\n\nimport jakarta.persistence.*;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\npublic class Rental {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private int id;\n\n    @Column(nullable = false)\n    @ManyToOne(targetEntity = Rental.class)\n    private Client client ;\n    @Column(nullable = false)\n    private LocalDate startDate;\n    @Column(nullable = false)\n    private LocalDate enDDate;\n    @Column(nullable = false)\n    private List<Movie> moviesRented;\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/mindswap/model/Rental.java b/src/main/java/org/mindswap/model/Rental.java
--- a/src/main/java/org/mindswap/model/Rental.java	(revision b2445abc8ab1e6510a854f27b4bc43b9fe9667d2)
+++ b/src/main/java/org/mindswap/model/Rental.java	(date 1679572188815)
@@ -1,10 +1,23 @@
 package org.mindswap.model;
 
 import jakarta.persistence.*;
+import lombok.*;
+import org.hibernate.annotations.SQLDelete;
+import org.hibernate.annotations.Where;
 
 import java.time.LocalDate;
 import java.util.List;
 
+@Getter
+@Setter
+@Builder
+@ToString
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+@Table(name = "rentals")
+@SQLDelete(sql = "UPDATE rentals SET deleted = true WHERE id=?")
+@Where(clause = "deleted=false")
 public class Rental {
 
     @Id
@@ -21,5 +34,10 @@
     @Column(nullable = false)
     private List<Movie> moviesRented;
 
+    @OneToOne
+    @JoinColumn(name = "invoice_id")
+    private Invoice invoice;
+
+
 
 }
Index: src/main/java/org/mindswap/service/MovieServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.mindswap.service;\n\nimport org.mindswap.dto.MovieCreateDto;\nimport org.mindswap.dto.MovieDto;\nimport org.mindswap.exceptions.MovieNotFoundException;\nimport org.mindswap.mapper.MovieMapper;\nimport org.mindswap.model.Movie;\nimport org.mindswap.repository.MovieRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic class MovieServiceImpl implements MovieService {\n    private MovieRepository movieRepository;\n\n    private MovieMapper movieMapper;\n\n    @Autowired\n    public MovieServiceImpl(MovieRepository movieRepository, MovieMapper movieMapper) {\n        this.movieRepository = movieRepository;\n        this.movieMapper = movieMapper;\n    }\n\n\n\n    @Override\n    public MovieDto createMovie(MovieCreateDto movieCreateDto) {\n       Movie movie =  movieMapper.fromCreateDtoToEntity(movieCreateDto);\n       movieRepository.save(movie);\n       return movieMapper.fromEntityToDto(movie);\n    }\n\n    @Override\n    public List<MovieDto> createMovies(List<MovieCreateDto> movieCreateDtoList) {\n        List<Movie> moviesList =  movieCreateDtoList.stream().map(movie -> movieMapper.fromCreateDtoToEntity(movie)).toList();\n        moviesList.forEach(movie -> movieRepository.save(movie));\n        return moviesList.stream().map(movie -> movieMapper.fromEntityToDto(movie)).toList();\n    }\n\n    @Override\n    public MovieDto getMovieById(Long movieId) {\n      Optional<Movie> movie = movieRepository.findById(movieId).orElseThrow(MovieNotFoundException);\n\n       return movieMapper.fromEntityToDto(movie);\n    }\n\n    @Override\n    public List<MovieDto> getAvailableMovies() {\n        return null;\n    }\n\n    @Override\n    public MovieDto updateMovie(Long movieId) {\n        return null;\n    }\n\n    @Override\n    public void deleteMovie(Long movieId) {\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/mindswap/service/MovieServiceImpl.java b/src/main/java/org/mindswap/service/MovieServiceImpl.java
--- a/src/main/java/org/mindswap/service/MovieServiceImpl.java	(revision b2445abc8ab1e6510a854f27b4bc43b9fe9667d2)
+++ b/src/main/java/org/mindswap/service/MovieServiceImpl.java	(date 1679569424749)
@@ -38,13 +38,16 @@
         return moviesList.stream().map(movie -> movieMapper.fromEntityToDto(movie)).toList();
     }
 
+
     @Override
     public MovieDto getMovieById(Long movieId) {
-      Optional<Movie> movie = movieRepository.findById(movieId).orElseThrow(MovieNotFoundException);
+      Movie movie = movieRepository.findById(movieId).orElseThrow(MovieNotFoundException::new);
 
        return movieMapper.fromEntityToDto(movie);
     }
 
+
+
     @Override
     public List<MovieDto> getAvailableMovies() {
         return null;
Index: src/main/java/org/mindswap/model/Invoice.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.mindswap.model;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport org.hibernate.annotations.SQLDelete;\nimport org.hibernate.annotations.Where;\n\n@Getter\n@Setter\n@Builder\n@ToString\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity\n@Table(name = \"invoices\")\n@SQLDelete(sql = \"UPDATE invoices SET deleted = true WHERE id=?\")\n@Where(clause = \"deleted=false\")\npublic class Invoice {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long Id;\n\n    @Column(nullable = false)\n    private double price;\n\n    @OneToOne(mappedBy = \"invoice\")\n    @JoinColumn(name = \"rental_ID\")\n    private Rental rental;\n\n    @ManyToOne(targetEntity = Worker.class, cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)\n    @JoinColumn(name = \"worker_ID\")\n    private Worker worker;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/mindswap/model/Invoice.java b/src/main/java/org/mindswap/model/Invoice.java
--- a/src/main/java/org/mindswap/model/Invoice.java	(revision b2445abc8ab1e6510a854f27b4bc43b9fe9667d2)
+++ b/src/main/java/org/mindswap/model/Invoice.java	(date 1679571759595)
@@ -24,7 +24,7 @@
     private double price;
 
     @OneToOne(mappedBy = "invoice")
-    @JoinColumn(name = "rental_ID")
+    @JoinColumn(name = "rental_Id")
     private Rental rental;
 
     @ManyToOne(targetEntity = Worker.class, cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)
Index: src/main/java/org/mindswap/MovieApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.mindswap;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class MovieApplication {\n    public static void main(String[] args) {\n\n\n\n        SpringApplication.run(MovieApplication.class, args);\n    }\n}\n\n//todo @data nas anotacoes lombok
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/mindswap/MovieApplication.java b/src/main/java/org/mindswap/MovieApplication.java
--- a/src/main/java/org/mindswap/MovieApplication.java	(revision b2445abc8ab1e6510a854f27b4bc43b9fe9667d2)
+++ b/src/main/java/org/mindswap/MovieApplication.java	(date 1679570257908)
@@ -6,9 +6,6 @@
 @SpringBootApplication
 public class MovieApplication {
     public static void main(String[] args) {
-
-
-
         SpringApplication.run(MovieApplication.class, args);
     }
 }
Index: src/main/java/org/mindswap/security/config/ApplicationConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.mindswap.security.config;\n\nimport lombok.RequiredArgsConstructor;\nimport org.mindswap.model.Client;\nimport org.mindswap.model.Worker;\nimport org.mindswap.repository.ClientRepository;\nimport org.mindswap.repository.WorkerRepository;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\nimport java.util.Optional;\n\n@Configuration\n@RequiredArgsConstructor\npublic class ApplicationConfig {\n\n    private final ClientRepository clientRepository;\n    private final WorkerRepository workerRepository;\n\n/*\n  @Bean\n  public UserDetailsService userDetailsService() {\n    return username -> clientRepository.findByEmail(username)\n        .orElseThrow(() -> new ClientNotFoundException());\n  }\n*/\n\n    @Bean\n    public UserDetailsService userDetailsService() {\n        return email -> {\n            Optional<Client> client = clientRepository.findByEmail(email);\n            if (client.isPresent()) {\n                return client.get();\n            } else {\n                Optional<Worker> worker = workerRepository.findByEmail(email);\n                if (worker.isPresent()) {\n                    return worker.get();\n                } else {\n                    throw new UsernameNotFoundException(\"User not found with email: \" + email);\n                }\n            }\n        };\n    }\n\n    @Bean\n    public AuthenticationProvider authenticationProvider() {\n        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();\n        authProvider.setUserDetailsService(userDetailsService());\n        authProvider.setPasswordEncoder(passwordEncoder());\n        return authProvider;\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {\n        return config.getAuthenticationManager();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/mindswap/security/config/ApplicationConfig.java b/src/main/java/org/mindswap/security/config/ApplicationConfig.java
--- a/src/main/java/org/mindswap/security/config/ApplicationConfig.java	(revision b2445abc8ab1e6510a854f27b4bc43b9fe9667d2)
+++ b/src/main/java/org/mindswap/security/config/ApplicationConfig.java	(date 1679570803193)
@@ -1,6 +1,7 @@
 package org.mindswap.security.config;
 
 import lombok.RequiredArgsConstructor;
+import org.mindswap.exceptions.ClientNotFoundException;
 import org.mindswap.model.Client;
 import org.mindswap.model.Worker;
 import org.mindswap.repository.ClientRepository;
@@ -31,7 +32,9 @@
     return username -> clientRepository.findByEmail(username)
         .orElseThrow(() -> new ClientNotFoundException());
   }
-*/
+
+ */
+
 
     @Bean
     public UserDetailsService userDetailsService() {
Index: src/main/java/org/mindswap/exceptions/MovieNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.mindswap.exceptions;\n\npublic class MovieNotFoundException extends Exception{\n    public MovieNotFoundException(){\n        super(\"Movie not found\");\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/mindswap/exceptions/MovieNotFoundException.java b/src/main/java/org/mindswap/exceptions/MovieNotFoundException.java
--- a/src/main/java/org/mindswap/exceptions/MovieNotFoundException.java	(revision b2445abc8ab1e6510a854f27b4bc43b9fe9667d2)
+++ b/src/main/java/org/mindswap/exceptions/MovieNotFoundException.java	(date 1679569424738)
@@ -1,6 +1,6 @@
 package org.mindswap.exceptions;
 
-public class MovieNotFoundException extends Exception{
+public class MovieNotFoundException extends RuntimeException{
     public MovieNotFoundException(){
         super("Movie not found");
     }
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.output.ansi.enabled=ALWAYS \nspring.datasource.url=jdbc:postgresql://localhost:5432/movie_database\nspring.datasource.username=root\nspring.datasource.password=1234\n\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\nspring.jpa.hibernate.ddl-auto=update
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision b2445abc8ab1e6510a854f27b4bc43b9fe9667d2)
+++ b/src/main/resources/application.properties	(date 1679569835442)
@@ -2,6 +2,5 @@
 spring.datasource.url=jdbc:postgresql://localhost:5432/movie_database
 spring.datasource.username=root
 spring.datasource.password=1234
-
 spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
 spring.jpa.hibernate.ddl-auto=update
\ No newline at end of file
Index: src/main/java/org/mindswap/controller/ManagerController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.mindswap.controller;\n\n\nimport org.mindswap.dto.ClientDto;\nimport org.mindswap.service.ManagerService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(path = \"/manager\")\npublic class ManagerController {\n\n    private final AuthenticationService authenticationService;\n    private ManagerService managerService;\n\n    @Autowired\n    public ManagerController(AuthenticationService authenticationService, ManagerService managerService) {\n        Authenticationservice = authenticationService;\n        this.managerService = managerService;\n    }\n\n    @GetMapping(\"\")\n    public ResponseEntity<String> WelcomeWorker() {\n        return new ResponseEntity<>(\"Welcome back, Manager\", HttpStatus.OK);\n    }\n\n    @GetMapping(path = \"/info\")\n    public ResponseEntity<ClientDto> myInfo() {\n        //TODO\n        return null;\n    }\n\n    @PostMapping(path = \"/insert-movie\")\n    public ResponseEntity<String> insertMovie() {\n        //TODO\n        return null;\n    }\n\n    @PatchMapping(path = \"/update-movie\")\n    public ResponseEntity<String> updateMovie() {\n        //TODO\n        return null;\n    }\n\n    @DeleteMapping(path = \"delete/{movie_id}\")\n    public ResponseEntity<String> deleteMovie(@PathVariable(\"movie_id\") Long movieId) {\n        //TODO\n        return null;\n    }\n\n    @PostMapping(\"/register-worker\")\n    public ResponseEntity<AuthenticationResponse> register(@RequestBody RegisterRequest request) {\n        return ResponseEntity.ok(authenticationService.register(request));\n    }\n\n    @DeleteMapping(path = \"/remove-worker/{worker_id}\")\n    public ResponseEntity<String> removeWorker(@PathVariable(\"worker_id\") Long workerId) {\n        //TODO\n        return null;\n    }\n\n\n\n\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/mindswap/controller/ManagerController.java b/src/main/java/org/mindswap/controller/ManagerController.java
--- a/src/main/java/org/mindswap/controller/ManagerController.java	(revision b2445abc8ab1e6510a854f27b4bc43b9fe9667d2)
+++ b/src/main/java/org/mindswap/controller/ManagerController.java	(date 1679569252954)
@@ -11,7 +11,7 @@
 @RestController
 @RequestMapping(path = "/manager")
 public class ManagerController {
-
+/*
     private final AuthenticationService authenticationService;
     private ManagerService managerService;
 
@@ -50,17 +50,21 @@
         return null;
     }
 
+
     @PostMapping("/register-worker")
     public ResponseEntity<AuthenticationResponse> register(@RequestBody RegisterRequest request) {
         return ResponseEntity.ok(authenticationService.register(request));
     }
 
+
+
     @DeleteMapping(path = "/remove-worker/{worker_id}")
     public ResponseEntity<String> removeWorker(@PathVariable("worker_id") Long workerId) {
         //TODO
         return null;
     }
 
+    */
 
 
 
